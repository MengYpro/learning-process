1. 想知道系统中有几个仓库和地址
	find ~ -name ".git" -type d -exec dirname {} \;
	不要漏后面的“\;”

2. 删除仓库
	（1）只删除仓库，保留文件：rm -rf /path/to/repository/.git
	（2）删除仓库和文件：rm -rf /path/to/repository

3. 新建仓库
	cd到仓库位置
	git init将该文件夹设置成仓库

4. account
	git config --globel user.name "user.name"
	git config --globel user.email "user.email"
	which account:
	git config --globel user.name
	git config --globel user.email
	
5. 新仓库推送至GitHub
	在GitHub上新建仓库
	
	# 添加GitHub作为远程仓库
	git remote add origin https://github.com/你的用户名/你的仓库名.git
	第一次链接的时候用一次就可以了，clone下来的也不用remote add

	# 推送到GitHub
	git push -u origin master
	origin是作为https的昵称，每个仓库位置只对应一个origin，以后每次用origin简化推送utl。
	master是主分支，有些git版本的主分支是main，注意查看。
	以后每次修改完要推送的时候用 git push origin master （或者其他分支）

	如果要修改origin的地址：
	git remote set-url origin git@github.com:GitHub用户名/GitHub仓库名.git

	确认远程仓库：
	git remote -v
	会显示链接的远程仓库，如果没有，则没有回应。

6. 本地与GitHub账号之间的身份认证
	两种方式：SSH和PAT，
	常用SSH，设置好后不需要每次都输入凭证。PAT更简单，但需要定期更新令牌。

	生成SSH密码：ssh-keygen -t ed25519 -C "您的邮箱@example.com"
	将公钥添加到GitHub账户：
	复制公钥(通常在~/.ssh/id_ed25519.pub)
	在GitHub上，访问Settings → SSH and GPG keys → New SSH key
	粘贴公钥并保存

	公钥密钥都保存在Ubuntu里，通常在
	~/.ssh/id_ed25519.pub（公钥）
	~/.ssh/id_ed25519（密钥）
	存放位置最好设置个密码，以防未经授权的人打开文件看到
	也可以设置个ssh-agent来缓存密钥，每次开机验证一次即可，不用每次都输入密码

7. clone，修改并上传新内容到GitHub
	git add
	git commit -m "添加内容介绍"
	git push origin 分支名
	这句必须是本人授权才行，需要输入账号密码
	如果没经过授权，可以尝试fork+pull-request来请求参与

8. 更新仓库（如果仓库内容被别的地方修改过）
	git push origin 分支名

9. 忽略某些特定的文件或者文件夹，添加空目录
	.gitignore 文件，文件中可以使用通配符

	举例.gitignore 文件写法：
	# 忽略所有 .log 文件
	*.log

	# 忽略 build 目录下的所有内容
	build/

	# 忽略 config.json 文件
	config.json

	# 忽略 tmp 目录中除了 .gitkeep 之外的所有文件（即只管tmp/.gitkeep, 忽略其他）
	tmp/*
	!tmp/.gitkeep

	这种模式通常用于以下情况：您希望在版本控制中包含一个空目录结构，但不包含
	该目录中的实际内容。因为Git不会跟踪空目录，所以开发者创建了一个惯例，即
	在空目录中放置一个名为.gitkeep的空文件（这个文件名只是一个约定，不是Git的
	特殊功能）。
	这样，当其他开发者克隆仓库时，他们会得到tmp目录结构，但目录内除了.gitkeep
	外是空的，可以用于临时文件存储，而这些临时文件不会被Git跟踪。

添加空目录结构到版本控制系统中有几个重要的原因：

确保程序正常运行 - 某些应用程序或脚本可能依赖特定目录结构存在，即使这些目录初始为空。
例如，一个应用可能需要一个logs/目录来存储日志文件，或者temp/目录来存储临时文件。
防止运行时错误 - 如果程序尝试写入一个不存在的目录，可能会产生错误。预先创建这些目录
可以避免"目录不存在"类型的错误。
提供清晰的项目结构 - 即使目前为空，预先创建目录可以让新开发者了解项目的整体结构和预期用途。
占位符功能 - 为将来可能添加的内容预留位置，使项目结构更完整和有前瞻性。
标准化部署环境 - 确保在所有部署环境中存在相同的目录结构，减少环境差异导致的问题。

由于Git本身不跟踪空目录（Git只跟踪文件内容，不跟踪目录），所以通过添加.gitkeep这样的
空文件作为占位符，就能将这些"看似空"但实际上包含一个隐藏文件的目录包含在版本控制中。
这是开发者社区的一种惯例解决方案，使项目结构更加完整和健壮。

比如：我需要一个空目录，这样运行程序才能不报错，其中的内容没必要上传进GitHub里，所以让git
不管理，但是这个空目录只存在与本地，被clone走了以后，别人就没这个目录了就会报错，所以需要
git确实管理着这样一个空目录，在空目录里添加一个空文件.gitkeep，就是为了git能成功管理这个
空目录使其非空，然后让git忽略掉“空目录”中存在的其他不需要被上传的文件
